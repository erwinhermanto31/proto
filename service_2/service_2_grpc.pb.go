// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// Service2Client is the client API for Service2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Service2Client interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type service2Client struct {
	cc grpc.ClientConnInterface
}

func NewService2Client(cc grpc.ClientConnInterface) Service2Client {
	return &service2Client{cc}
}

func (c *service2Client) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/service_2.Service2/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Service2Server is the server API for Service2 service.
// All implementations must embed UnimplementedService2Server
// for forward compatibility
type Service2Server interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedService2Server()
}

// UnimplementedService2Server must be embedded to have forward compatible implementations.
type UnimplementedService2Server struct {
}

func (UnimplementedService2Server) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedService2Server) mustEmbedUnimplementedService2Server() {}

// UnsafeService2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Service2Server will
// result in compilation errors.
type UnsafeService2Server interface {
	mustEmbedUnimplementedService2Server()
}

func RegisterService2Server(s grpc.ServiceRegistrar, srv Service2Server) {
	s.RegisterService(&_Service2_serviceDesc, srv)
}

func _Service2_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Service2Server).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_2.Service2/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Service2Server).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_2.Service2",
	HandlerType: (*Service2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Service2_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_2/service_2.proto",
}
